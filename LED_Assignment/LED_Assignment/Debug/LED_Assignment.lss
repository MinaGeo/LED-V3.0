
LED_Assignment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000b4a  00000bde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800064  00800064  00000be2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000be2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  00000c50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001b3a  00000000  00000000  00000e50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4f  00000000  00000000  0000298a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011ef  00000000  00000000  000033d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000042c  00000000  00000000  000045c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082b  00000000  00000000  000049f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000da9  00000000  00000000  0000521f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000190  00000000  00000000  00005fc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 33 00 	jmp	0x66	; 0x66 <__ctors_end>
   4:	0c 94 85 04 	jmp	0x90a	; 0x90a <__vector_1>
   8:	0c 94 ae 04 	jmp	0x95c	; 0x95c <__vector_2>
   c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  10:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  14:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  18:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  1c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  20:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  24:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  28:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  2c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  30:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  34:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  38:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  3c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  40:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  44:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  48:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  4c:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  50:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__bad_interrupt>
  54:	d6 00       	.word	0x00d6	; ????
  56:	f2 00       	.word	0x00f2	; ????
  58:	fb 00       	.word	0x00fb	; ????
  5a:	0a 01       	movw	r0, r20
  5c:	1f 01       	movw	r2, r30
  5e:	3a 01       	movw	r6, r20
  60:	55 01       	movw	r10, r10
  62:	6a 01       	movw	r12, r20
  64:	78 01       	movw	r14, r16

00000066 <__ctors_end>:
  66:	11 24       	eor	r1, r1
  68:	1f be       	out	0x3f, r1	; 63
  6a:	cf e5       	ldi	r28, 0x5F	; 95
  6c:	d8 e0       	ldi	r29, 0x08	; 8
  6e:	de bf       	out	0x3e, r29	; 62
  70:	cd bf       	out	0x3d, r28	; 61

00000072 <__do_copy_data>:
  72:	10 e0       	ldi	r17, 0x00	; 0
  74:	a0 e6       	ldi	r26, 0x60	; 96
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	ea e4       	ldi	r30, 0x4A	; 74
  7a:	fb e0       	ldi	r31, 0x0B	; 11
  7c:	02 c0       	rjmp	.+4      	; 0x82 <__do_copy_data+0x10>
  7e:	05 90       	lpm	r0, Z+
  80:	0d 92       	st	X+, r0
  82:	a4 36       	cpi	r26, 0x64	; 100
  84:	b1 07       	cpc	r27, r17
  86:	d9 f7       	brne	.-10     	; 0x7e <__do_copy_data+0xc>

00000088 <__do_clear_bss>:
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	a4 e6       	ldi	r26, 0x64	; 100
  8c:	b0 e0       	ldi	r27, 0x00	; 0
  8e:	01 c0       	rjmp	.+2      	; 0x92 <.do_clear_bss_start>

00000090 <.do_clear_bss_loop>:
  90:	1d 92       	st	X+, r1

00000092 <.do_clear_bss_start>:
  92:	ac 36       	cpi	r26, 0x6C	; 108
  94:	b2 07       	cpc	r27, r18
  96:	e1 f7       	brne	.-8      	; 0x90 <.do_clear_bss_loop>
  98:	0e 94 12 03 	call	0x624	; 0x624 <main>
  9c:	0c 94 a3 05 	jmp	0xb46	; 0xb46 <_exit>

000000a0 <__bad_interrupt>:
  a0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a4 <callback_exti0>:


void callback_exti0 (void)
{
	
	if (currentLed < NUMBER_OF_CASES) {
  a4:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <currentLed>
  a8:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <currentLed+0x1>
  ac:	88 30       	cpi	r24, 0x08	; 8
  ae:	91 05       	cpc	r25, r1
  b0:	34 f4       	brge	.+12     	; 0xbe <callback_exti0+0x1a>
		currentLed++;
  b2:	01 96       	adiw	r24, 0x01	; 1
  b4:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <currentLed+0x1>
  b8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <currentLed>
  bc:	08 95       	ret
		} else {
		currentLed = CASE1;
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <currentLed+0x1>
  c6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <currentLed>
  ca:	08 95       	ret

000000cc <callback_exti1>:
	}
}
void callback_exti1 (void)
{
	
	if (currentBlink < NUMBER_OF_BLINKS) {
  cc:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentBlink>
  d0:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <currentBlink+0x1>
  d4:	85 30       	cpi	r24, 0x05	; 5
  d6:	91 05       	cpc	r25, r1
  d8:	34 f4       	brge	.+12     	; 0xe6 <callback_exti1+0x1a>
		currentBlink++;
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <currentBlink+0x1>
  e0:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <currentBlink>
  e4:	08 95       	ret
		} else {
		currentBlink = CASE1;
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <currentBlink+0x1>
  ee:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <currentBlink>
  f2:	08 95       	ret

000000f4 <APP_init>:
uint8_t timer_mode_tst = timer0_normal_mode;
static void callback_exti0 (void);
static void callback_exti1 (void);
//
EN_appError_t APP_init(void) {
  if (LED_init(LED_1_PORT, led_pin_tst) != LED_OK) {
  f4:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <led_pin_tst>
  f8:	81 e4       	ldi	r24, 0x41	; 65
  fa:	0e 94 06 03 	call	0x60c	; 0x60c <LED_init>
  fe:	81 11       	cpse	r24, r1
 100:	3b c0       	rjmp	.+118    	; 0x178 <APP_init+0x84>
    return APP_LED_ERROR;
  } else if (LED_init(LED_2_PORT, LED_2_PIN) != LED_OK) {
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	81 e4       	ldi	r24, 0x41	; 65
 106:	0e 94 06 03 	call	0x60c	; 0x60c <LED_init>
 10a:	81 11       	cpse	r24, r1
 10c:	37 c0       	rjmp	.+110    	; 0x17c <APP_init+0x88>
    return APP_LED_ERROR;
  } else if (LED_init(LED_3_PORT, LED_3_PIN) != LED_OK) {
 10e:	65 e0       	ldi	r22, 0x05	; 5
 110:	81 e4       	ldi	r24, 0x41	; 65
 112:	0e 94 06 03 	call	0x60c	; 0x60c <LED_init>
 116:	81 11       	cpse	r24, r1
 118:	33 c0       	rjmp	.+102    	; 0x180 <APP_init+0x8c>
    return APP_LED_ERROR;
  } else if (LED_init(LED_4_PORT, LED_4_PIN) != LED_OK) {
 11a:	67 e0       	ldi	r22, 0x07	; 7
 11c:	81 e4       	ldi	r24, 0x41	; 65
 11e:	0e 94 06 03 	call	0x60c	; 0x60c <LED_init>
 122:	81 11       	cpse	r24, r1
 124:	2f c0       	rjmp	.+94     	; 0x184 <APP_init+0x90>
    return APP_LED_ERROR;
  } else if (BUTTON_init(BUTTON_1_PORT, btn_pin_tst) != BTN_OK) {
 126:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 12a:	84 e4       	ldi	r24, 0x44	; 68
 12c:	0e 94 02 03 	call	0x604	; 0x604 <BUTTON_init>
 130:	81 11       	cpse	r24, r1
 132:	2a c0       	rjmp	.+84     	; 0x188 <APP_init+0x94>
    return APP_BTN_ERROR;
  } else if (BUTTON_init(BUTTON_2_PORT, BUTTON_2_PIN) != BTN_OK) {
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	84 e4       	ldi	r24, 0x44	; 68
 138:	0e 94 02 03 	call	0x604	; 0x604 <BUTTON_init>
 13c:	81 11       	cpse	r24, r1
 13e:	26 c0       	rjmp	.+76     	; 0x18c <APP_init+0x98>
    return APP_BTN_ERROR;
  } else {

    /* Enabling global interrupts */
    enable_Global_interrupt();
 140:	0e 94 79 04 	call	0x8f2	; 0x8f2 <enable_Global_interrupt>
    /* Choose the external interrupt 0 sense - sense on rising edge */
    extInt0_rising();
 144:	0e 94 6e 04 	call	0x8dc	; 0x8dc <extInt0_rising>
	/* Choose the external interrupt 1 sense - sense on rising edge */
	extInt1_rising();
 148:	0e 94 72 04 	call	0x8e4	; 0x8e4 <extInt1_rising>
    /*enable external interrupt 0- INT0 */
    enable_external_interrupt0();
 14c:	0e 94 66 04 	call	0x8cc	; 0x8cc <enable_external_interrupt0>
    /*enable external interrupt 1- INT1 */
	enable_external_interrupt1();
 150:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <enable_external_interrupt1>

	
    //2. Choose timer mode (Normal mode)
   if(timer0_mode(timer_mode_tst) != TIMER_OK){
 154:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 158:	0e 94 d7 04 	call	0x9ae	; 0x9ae <timer0_mode>
 15c:	81 11       	cpse	r24, r1
 15e:	18 c0       	rjmp	.+48     	; 0x190 <APP_init+0x9c>
   return APP_ERROR_EXIT;
   }
    // Timer set initial value
    timer0_set_initial();
 160:	0e 94 01 05 	call	0xa02	; 0xa02 <timer0_set_initial>
EXI1_SetCallBack(&callback_exti1);
 164:	86 e6       	ldi	r24, 0x66	; 102
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 80 04 	call	0x900	; 0x900 <EXI1_SetCallBack>
EXI0_SetCallBack(&callback_exti0);
 16c:	82 e5       	ldi	r24, 0x52	; 82
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <EXI0_SetCallBack>
    return APP_OK;
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	08 95       	ret
static void callback_exti0 (void);
static void callback_exti1 (void);
//
EN_appError_t APP_init(void) {
  if (LED_init(LED_1_PORT, led_pin_tst) != LED_OK) {
    return APP_LED_ERROR;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	08 95       	ret
  } else if (LED_init(LED_2_PORT, LED_2_PIN) != LED_OK) {
    return APP_LED_ERROR;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	08 95       	ret
  } else if (LED_init(LED_3_PORT, LED_3_PIN) != LED_OK) {
    return APP_LED_ERROR;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	08 95       	ret
  } else if (LED_init(LED_4_PORT, LED_4_PIN) != LED_OK) {
    return APP_LED_ERROR;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	08 95       	ret
  } else if (BUTTON_init(BUTTON_1_PORT, btn_pin_tst) != BTN_OK) {
    return APP_BTN_ERROR;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	08 95       	ret
  } else if (BUTTON_init(BUTTON_2_PORT, BUTTON_2_PIN) != BTN_OK) {
    return APP_BTN_ERROR;
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	08 95       	ret
	enable_external_interrupt1();

	
    //2. Choose timer mode (Normal mode)
   if(timer0_mode(timer_mode_tst) != TIMER_OK){
   return APP_ERROR_EXIT;
 190:	84 e0       	ldi	r24, 0x04	; 4
EXI1_SetCallBack(&callback_exti1);
EXI0_SetCallBack(&callback_exti0);
    return APP_OK;
  }

}
 192:	08 95       	ret

00000194 <blinkSetup>:

}

EN_appError_t blinkSetup(void)
{
	switch (currentLed)
 194:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <currentLed>
 198:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <currentLed+0x1>
 19c:	e9 30       	cpi	r30, 0x09	; 9
 19e:	f1 05       	cpc	r31, r1
 1a0:	08 f0       	brcs	.+2      	; 0x1a4 <blinkSetup+0x10>
 1a2:	ae c0       	rjmp	.+348    	; 0x300 <blinkSetup+0x16c>
 1a4:	e6 5d       	subi	r30, 0xD6	; 214
 1a6:	ff 4f       	sbci	r31, 0xFF	; 255
 1a8:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <__tablejump2__>
	{
		case CASE0:
		if(LED_off(LED_1_PORT, led_pin_tst)!=LED_OK){
 1ac:	60 91 65 00 	lds	r22, 0x0065	; 0x800065 <led_pin_tst>
 1b0:	81 e4       	ldi	r24, 0x41	; 65
 1b2:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 1b6:	81 11       	cpse	r24, r1
 1b8:	a5 c0       	rjmp	.+330    	; 0x304 <blinkSetup+0x170>
			return APP_LED_ERROR;
		}
		else if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
 1ba:	63 e0       	ldi	r22, 0x03	; 3
 1bc:	81 e4       	ldi	r24, 0x41	; 65
 1be:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 1c2:	81 11       	cpse	r24, r1
 1c4:	a1 c0       	rjmp	.+322    	; 0x308 <blinkSetup+0x174>
			return APP_LED_ERROR;
			
		}
		else if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
 1c6:	65 e0       	ldi	r22, 0x05	; 5
 1c8:	81 e4       	ldi	r24, 0x41	; 65
 1ca:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 1ce:	81 11       	cpse	r24, r1
 1d0:	9d c0       	rjmp	.+314    	; 0x30c <blinkSetup+0x178>
			return APP_LED_ERROR;
			
			}else if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
 1d2:	67 e0       	ldi	r22, 0x07	; 7
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 1da:	88 23       	and	r24, r24
 1dc:	09 f4       	brne	.+2      	; 0x1e0 <blinkSetup+0x4c>
 1de:	98 c0       	rjmp	.+304    	; 0x310 <blinkSetup+0x17c>
			return APP_LED_ERROR;
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret
		}
		
		
		break;
		case CASE1:
		if(LED_on(LED_1_PORT, LED_1_PIN)!= LED_OK)
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	81 e4       	ldi	r24, 0x41	; 65
 1e8:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 1ec:	88 23       	and	r24, r24
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <blinkSetup+0x5e>
 1f0:	91 c0       	rjmp	.+290    	; 0x314 <blinkSetup+0x180>
		{
			return APP_LED_ERROR;
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	08 95       	ret
		}
		break;
		
		case CASE2:
		if(LED_on(LED_1_PORT, LED_1_PIN)!= LED_OK)
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	81 e4       	ldi	r24, 0x41	; 65
 1fa:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 1fe:	81 11       	cpse	r24, r1
 200:	8b c0       	rjmp	.+278    	; 0x318 <blinkSetup+0x184>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_2_PORT, LED_2_PIN) != LED_OK)
 202:	63 e0       	ldi	r22, 0x03	; 3
 204:	81 e4       	ldi	r24, 0x41	; 65
 206:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 20a:	88 23       	and	r24, r24
 20c:	09 f4       	brne	.+2      	; 0x210 <blinkSetup+0x7c>
 20e:	86 c0       	rjmp	.+268    	; 0x31c <blinkSetup+0x188>
		{
			return APP_LED_ERROR;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	08 95       	ret
		}
		break;
		
		case CASE3:
		if(LED_on(LED_1_PORT, LED_1_PIN)!= LED_OK)
 214:	60 e0       	ldi	r22, 0x00	; 0
 216:	81 e4       	ldi	r24, 0x41	; 65
 218:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 21c:	81 11       	cpse	r24, r1
 21e:	80 c0       	rjmp	.+256    	; 0x320 <blinkSetup+0x18c>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_2_PORT, LED_2_PIN) != LED_OK)
 220:	63 e0       	ldi	r22, 0x03	; 3
 222:	81 e4       	ldi	r24, 0x41	; 65
 224:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 228:	81 11       	cpse	r24, r1
 22a:	7c c0       	rjmp	.+248    	; 0x324 <blinkSetup+0x190>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_3_PORT, LED_3_PIN) != LED_OK)
 22c:	65 e0       	ldi	r22, 0x05	; 5
 22e:	81 e4       	ldi	r24, 0x41	; 65
 230:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 234:	88 23       	and	r24, r24
 236:	09 f4       	brne	.+2      	; 0x23a <blinkSetup+0xa6>
 238:	77 c0       	rjmp	.+238    	; 0x328 <blinkSetup+0x194>
		{
			return APP_LED_ERROR;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	08 95       	ret
		}
		break;
		
		case CASE4:
		if(LED_on(LED_1_PORT, LED_1_PIN)!= LED_OK)
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	81 e4       	ldi	r24, 0x41	; 65
 242:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 246:	81 11       	cpse	r24, r1
 248:	71 c0       	rjmp	.+226    	; 0x32c <blinkSetup+0x198>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_2_PORT, LED_2_PIN) != LED_OK)
 24a:	63 e0       	ldi	r22, 0x03	; 3
 24c:	81 e4       	ldi	r24, 0x41	; 65
 24e:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 252:	81 11       	cpse	r24, r1
 254:	6d c0       	rjmp	.+218    	; 0x330 <blinkSetup+0x19c>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_3_PORT, LED_3_PIN) != LED_OK)
 256:	65 e0       	ldi	r22, 0x05	; 5
 258:	81 e4       	ldi	r24, 0x41	; 65
 25a:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 25e:	81 11       	cpse	r24, r1
 260:	69 c0       	rjmp	.+210    	; 0x334 <blinkSetup+0x1a0>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_4_PORT, LED_4_PIN) != LED_OK)
 262:	67 e0       	ldi	r22, 0x07	; 7
 264:	81 e4       	ldi	r24, 0x41	; 65
 266:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 26a:	88 23       	and	r24, r24
 26c:	09 f4       	brne	.+2      	; 0x270 <blinkSetup+0xdc>
 26e:	64 c0       	rjmp	.+200    	; 0x338 <blinkSetup+0x1a4>
		{
			return APP_LED_ERROR;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	08 95       	ret
		}
		break;
		case CASE5:
		if(LED_off(LED_1_PORT, LED_1_PIN)!=LED_OK){
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	81 e4       	ldi	r24, 0x41	; 65
 278:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 27c:	81 11       	cpse	r24, r1
 27e:	5e c0       	rjmp	.+188    	; 0x33c <blinkSetup+0x1a8>
			return APP_LED_ERROR;
		}
		if(LED_on(LED_2_PORT, LED_2_PIN) != LED_OK)
 280:	63 e0       	ldi	r22, 0x03	; 3
 282:	81 e4       	ldi	r24, 0x41	; 65
 284:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 288:	81 11       	cpse	r24, r1
 28a:	5a c0       	rjmp	.+180    	; 0x340 <blinkSetup+0x1ac>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_3_PORT, LED_3_PIN) != LED_OK)
 28c:	65 e0       	ldi	r22, 0x05	; 5
 28e:	81 e4       	ldi	r24, 0x41	; 65
 290:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 294:	81 11       	cpse	r24, r1
 296:	56 c0       	rjmp	.+172    	; 0x344 <blinkSetup+0x1b0>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_4_PORT, LED_4_PIN) != LED_OK)
 298:	67 e0       	ldi	r22, 0x07	; 7
 29a:	81 e4       	ldi	r24, 0x41	; 65
 29c:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 2a0:	88 23       	and	r24, r24
 2a2:	09 f4       	brne	.+2      	; 0x2a6 <blinkSetup+0x112>
 2a4:	51 c0       	rjmp	.+162    	; 0x348 <blinkSetup+0x1b4>
		{
			return APP_LED_ERROR;
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	08 95       	ret
		}
		break;
		case CASE6:
		
		if(LED_on(LED_3_PORT, LED_3_PIN) != LED_OK)
 2aa:	65 e0       	ldi	r22, 0x05	; 5
 2ac:	81 e4       	ldi	r24, 0x41	; 65
 2ae:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 2b2:	81 11       	cpse	r24, r1
 2b4:	4b c0       	rjmp	.+150    	; 0x34c <blinkSetup+0x1b8>
		{
			return APP_LED_ERROR;
		}
		if(LED_on(LED_4_PORT, LED_4_PIN) != LED_OK)
 2b6:	67 e0       	ldi	r22, 0x07	; 7
 2b8:	81 e4       	ldi	r24, 0x41	; 65
 2ba:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 2be:	81 11       	cpse	r24, r1
 2c0:	47 c0       	rjmp	.+142    	; 0x350 <blinkSetup+0x1bc>
		{
			return APP_LED_ERROR;
		}
		if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
 2c2:	63 e0       	ldi	r22, 0x03	; 3
 2c4:	81 e4       	ldi	r24, 0x41	; 65
 2c6:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 2ca:	88 23       	and	r24, r24
 2cc:	09 f4       	brne	.+2      	; 0x2d0 <blinkSetup+0x13c>
 2ce:	42 c0       	rjmp	.+132    	; 0x354 <blinkSetup+0x1c0>
			return APP_LED_ERROR;
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	08 95       	ret
			
		}
		break;
		case CASE7:
		
		if(LED_on(LED_4_PORT, LED_4_PIN) != LED_OK)
 2d4:	67 e0       	ldi	r22, 0x07	; 7
 2d6:	81 e4       	ldi	r24, 0x41	; 65
 2d8:	0e 94 0a 03 	call	0x614	; 0x614 <LED_on>
 2dc:	81 11       	cpse	r24, r1
 2de:	3c c0       	rjmp	.+120    	; 0x358 <blinkSetup+0x1c4>
		{
			return APP_LED_ERROR;
		}
		if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
 2e0:	65 e0       	ldi	r22, 0x05	; 5
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 2e8:	88 23       	and	r24, r24
 2ea:	c1 f1       	breq	.+112    	; 0x35c <blinkSetup+0x1c8>
			return APP_LED_ERROR;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret
			
		}
		break;
		
		case CASE8:
		if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
 2f0:	67 e0       	ldi	r22, 0x07	; 7
 2f2:	81 e4       	ldi	r24, 0x41	; 65
 2f4:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 2f8:	88 23       	and	r24, r24
 2fa:	91 f1       	breq	.+100    	; 0x360 <blinkSetup+0x1cc>
			return APP_LED_ERROR;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	08 95       	ret
		}
		break;
		default:
		return APP_OK;
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	08 95       	ret
{
	switch (currentLed)
	{
		case CASE0:
		if(LED_off(LED_1_PORT, led_pin_tst)!=LED_OK){
			return APP_LED_ERROR;
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	08 95       	ret
		}
		else if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
			return APP_LED_ERROR;
 308:	81 e0       	ldi	r24, 0x01	; 1
 30a:	08 95       	ret
			
		}
		else if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
			return APP_LED_ERROR;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	08 95       	ret
		return APP_OK;
		// Do nothing
		break;
		
	}
		return APP_OK;
 310:	80 e0       	ldi	r24, 0x00	; 0
 312:	08 95       	ret
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	08 95       	ret
		break;
		
		case CASE2:
		if(LED_on(LED_1_PORT, LED_1_PIN)!= LED_OK)
		{
			return APP_LED_ERROR;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	08 95       	ret
		return APP_OK;
		// Do nothing
		break;
		
	}
		return APP_OK;
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	08 95       	ret
		break;
		
		case CASE3:
		if(LED_on(LED_1_PORT, LED_1_PIN)!= LED_OK)
		{
			return APP_LED_ERROR;
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	08 95       	ret
		}
		if(LED_on(LED_2_PORT, LED_2_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	08 95       	ret
		return APP_OK;
		// Do nothing
		break;
		
	}
		return APP_OK;
 328:	80 e0       	ldi	r24, 0x00	; 0
 32a:	08 95       	ret
		break;
		
		case CASE4:
		if(LED_on(LED_1_PORT, LED_1_PIN)!= LED_OK)
		{
			return APP_LED_ERROR;
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	08 95       	ret
		}
		if(LED_on(LED_2_PORT, LED_2_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 330:	81 e0       	ldi	r24, 0x01	; 1
 332:	08 95       	ret
		}
		if(LED_on(LED_3_PORT, LED_3_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	08 95       	ret
		return APP_OK;
		// Do nothing
		break;
		
	}
		return APP_OK;
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	08 95       	ret
			return APP_LED_ERROR;
		}
		break;
		case CASE5:
		if(LED_off(LED_1_PORT, LED_1_PIN)!=LED_OK){
			return APP_LED_ERROR;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	08 95       	ret
		}
		if(LED_on(LED_2_PORT, LED_2_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	08 95       	ret
		}
		if(LED_on(LED_3_PORT, LED_3_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 344:	81 e0       	ldi	r24, 0x01	; 1
 346:	08 95       	ret
		return APP_OK;
		// Do nothing
		break;
		
	}
		return APP_OK;
 348:	80 e0       	ldi	r24, 0x00	; 0
 34a:	08 95       	ret
		break;
		case CASE6:
		
		if(LED_on(LED_3_PORT, LED_3_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	08 95       	ret
		}
		if(LED_on(LED_4_PORT, LED_4_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 350:	81 e0       	ldi	r24, 0x01	; 1
 352:	08 95       	ret
		return APP_OK;
		// Do nothing
		break;
		
	}
		return APP_OK;
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	08 95       	ret
		break;
		case CASE7:
		
		if(LED_on(LED_4_PORT, LED_4_PIN) != LED_OK)
		{
			return APP_LED_ERROR;
 358:	81 e0       	ldi	r24, 0x01	; 1
 35a:	08 95       	ret
		return APP_OK;
		// Do nothing
		break;
		
	}
		return APP_OK;
 35c:	80 e0       	ldi	r24, 0x00	; 0
 35e:	08 95       	ret
 360:	80 e0       	ldi	r24, 0x00	; 0
		
	
 362:	08 95       	ret

00000364 <BLINK_1>:
  }

}


EN_appError_t BLINK_1(void) {
 364:	cf 93       	push	r28
if(blinkSetup()!= APP_OK)
 366:	0e 94 ca 00 	call	0x194	; 0x194 <blinkSetup>
 36a:	c8 2f       	mov	r28, r24
 36c:	81 11       	cpse	r24, r1
 36e:	26 c0       	rjmp	.+76     	; 0x3bc <BLINK_1+0x58>
{
	return APP_ERROR_EXIT;
}
			if(timer_delay(BLINK1_ON) != TIMER_OK)
 370:	84 e6       	ldi	r24, 0x64	; 100
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 378:	81 11       	cpse	r24, r1
 37a:	22 c0       	rjmp	.+68     	; 0x3c0 <BLINK_1+0x5c>
			{
				return APP_ERROR_EXIT;
			}
				if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
 37c:	60 e0       	ldi	r22, 0x00	; 0
 37e:	81 e4       	ldi	r24, 0x41	; 65
 380:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 384:	81 11       	cpse	r24, r1
 386:	1e c0       	rjmp	.+60     	; 0x3c4 <BLINK_1+0x60>
					return APP_LED_ERROR;
					
				}
				if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	81 e4       	ldi	r24, 0x41	; 65
 38c:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 390:	81 11       	cpse	r24, r1
 392:	1a c0       	rjmp	.+52     	; 0x3c8 <BLINK_1+0x64>
					return APP_LED_ERROR;
					
				}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
 394:	65 e0       	ldi	r22, 0x05	; 5
 396:	81 e4       	ldi	r24, 0x41	; 65
 398:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 39c:	81 11       	cpse	r24, r1
 39e:	16 c0       	rjmp	.+44     	; 0x3cc <BLINK_1+0x68>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
 3a0:	67 e0       	ldi	r22, 0x07	; 7
 3a2:	81 e4       	ldi	r24, 0x41	; 65
 3a4:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 3a8:	81 11       	cpse	r24, r1
 3aa:	12 c0       	rjmp	.+36     	; 0x3d0 <BLINK_1+0x6c>
				return APP_LED_ERROR;
			}
			if(timer_delay(BLINK1_OFF) != TIMER_OK)
 3ac:	84 e8       	ldi	r24, 0x84	; 132
 3ae:	93 e0       	ldi	r25, 0x03	; 3
 3b0:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 3b4:	88 23       	and	r24, r24
 3b6:	69 f0       	breq	.+26     	; 0x3d2 <BLINK_1+0x6e>
			{
				return APP_ERROR_EXIT;
 3b8:	c4 e0       	ldi	r28, 0x04	; 4
 3ba:	0b c0       	rjmp	.+22     	; 0x3d2 <BLINK_1+0x6e>


EN_appError_t BLINK_1(void) {
if(blinkSetup()!= APP_OK)
{
	return APP_ERROR_EXIT;
 3bc:	c4 e0       	ldi	r28, 0x04	; 4
 3be:	09 c0       	rjmp	.+18     	; 0x3d2 <BLINK_1+0x6e>
}
			if(timer_delay(BLINK1_ON) != TIMER_OK)
			{
				return APP_ERROR_EXIT;
 3c0:	c4 e0       	ldi	r28, 0x04	; 4
 3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <BLINK_1+0x6e>
			}
				if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
					return APP_LED_ERROR;
 3c4:	c1 e0       	ldi	r28, 0x01	; 1
 3c6:	05 c0       	rjmp	.+10     	; 0x3d2 <BLINK_1+0x6e>
					
				}
				if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
					return APP_LED_ERROR;
 3c8:	c1 e0       	ldi	r28, 0x01	; 1
 3ca:	03 c0       	rjmp	.+6      	; 0x3d2 <BLINK_1+0x6e>
					
				}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
				return APP_LED_ERROR;
 3cc:	c1 e0       	ldi	r28, 0x01	; 1
 3ce:	01 c0       	rjmp	.+2      	; 0x3d2 <BLINK_1+0x6e>
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
				return APP_LED_ERROR;
 3d0:	c1 e0       	ldi	r28, 0x01	; 1
			if(timer_delay(BLINK1_OFF) != TIMER_OK)
			{
				return APP_ERROR_EXIT;
			}
return APP_OK;
}
 3d2:	8c 2f       	mov	r24, r28
 3d4:	cf 91       	pop	r28
 3d6:	08 95       	ret

000003d8 <BLINK_2>:

EN_appError_t BLINK_2(void) {
 3d8:	cf 93       	push	r28
if(blinkSetup()!= APP_OK)
 3da:	0e 94 ca 00 	call	0x194	; 0x194 <blinkSetup>
 3de:	c8 2f       	mov	r28, r24
 3e0:	81 11       	cpse	r24, r1
 3e2:	26 c0       	rjmp	.+76     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
{
	return APP_ERROR_EXIT;
}
	if(timer_delay(BLINK2_ON) != TIMER_OK)
 3e4:	88 ec       	ldi	r24, 0xC8	; 200
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 3ec:	81 11       	cpse	r24, r1
 3ee:	22 c0       	rjmp	.+68     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	{
		return APP_ERROR_EXIT;
	}
			if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	81 e4       	ldi	r24, 0x41	; 65
 3f4:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 3f8:	81 11       	cpse	r24, r1
 3fa:	1e c0       	rjmp	.+60     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
					return APP_LED_ERROR;
					
				}
				if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
 3fc:	63 e0       	ldi	r22, 0x03	; 3
 3fe:	81 e4       	ldi	r24, 0x41	; 65
 400:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 404:	81 11       	cpse	r24, r1
 406:	1a c0       	rjmp	.+52     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
					return APP_LED_ERROR;
					
				}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
 408:	65 e0       	ldi	r22, 0x05	; 5
 40a:	81 e4       	ldi	r24, 0x41	; 65
 40c:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 410:	81 11       	cpse	r24, r1
 412:	16 c0       	rjmp	.+44     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
 414:	67 e0       	ldi	r22, 0x07	; 7
 416:	81 e4       	ldi	r24, 0x41	; 65
 418:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 41c:	81 11       	cpse	r24, r1
 41e:	12 c0       	rjmp	.+36     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
				return APP_LED_ERROR;
			}
	if(timer_delay(BLINK2_OFF) != TIMER_OK)
 420:	80 e2       	ldi	r24, 0x20	; 32
 422:	93 e0       	ldi	r25, 0x03	; 3
 424:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 428:	88 23       	and	r24, r24
 42a:	69 f0       	breq	.+26     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	{
		return APP_ERROR_EXIT;
 42c:	c4 e0       	ldi	r28, 0x04	; 4
 42e:	0b c0       	rjmp	.+22     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
}

EN_appError_t BLINK_2(void) {
if(blinkSetup()!= APP_OK)
{
	return APP_ERROR_EXIT;
 430:	c4 e0       	ldi	r28, 0x04	; 4
 432:	09 c0       	rjmp	.+18     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
}
	if(timer_delay(BLINK2_ON) != TIMER_OK)
	{
		return APP_ERROR_EXIT;
 434:	c4 e0       	ldi	r28, 0x04	; 4
 436:	07 c0       	rjmp	.+14     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
	}
			if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
					return APP_LED_ERROR;
 438:	c1 e0       	ldi	r28, 0x01	; 1
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					
				}
				if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
					return APP_LED_ERROR;
 43c:	c1 e0       	ldi	r28, 0x01	; 1
 43e:	03 c0       	rjmp	.+6      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
					
				}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
				return APP_LED_ERROR;
 440:	c1 e0       	ldi	r28, 0x01	; 1
 442:	01 c0       	rjmp	.+2      	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
				return APP_LED_ERROR;
 444:	c1 e0       	ldi	r28, 0x01	; 1
	{
		return APP_ERROR_EXIT;
	}
return APP_OK;

}
 446:	8c 2f       	mov	r24, r28
 448:	cf 91       	pop	r28
 44a:	08 95       	ret

0000044c <BLINK_3>:
EN_appError_t BLINK_3(void) {
 44c:	cf 93       	push	r28
	if(blinkSetup()!= APP_OK)
 44e:	0e 94 ca 00 	call	0x194	; 0x194 <blinkSetup>
 452:	c8 2f       	mov	r28, r24
 454:	81 11       	cpse	r24, r1
 456:	26 c0       	rjmp	.+76     	; 0x4a4 <BLINK_3+0x58>
	{
		return APP_ERROR_EXIT;
	}
if(timer_delay(BLINK3_ON) != TIMER_OK)
 458:	8c e2       	ldi	r24, 0x2C	; 44
 45a:	91 e0       	ldi	r25, 0x01	; 1
 45c:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 460:	81 11       	cpse	r24, r1
 462:	22 c0       	rjmp	.+68     	; 0x4a8 <BLINK_3+0x5c>
{
	return APP_ERROR_EXIT;
}
		if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
 464:	60 e0       	ldi	r22, 0x00	; 0
 466:	81 e4       	ldi	r24, 0x41	; 65
 468:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 46c:	81 11       	cpse	r24, r1
 46e:	1e c0       	rjmp	.+60     	; 0x4ac <BLINK_3+0x60>
			return APP_LED_ERROR;
			
		}
		if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
 470:	63 e0       	ldi	r22, 0x03	; 3
 472:	81 e4       	ldi	r24, 0x41	; 65
 474:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 478:	81 11       	cpse	r24, r1
 47a:	1a c0       	rjmp	.+52     	; 0x4b0 <BLINK_3+0x64>
			return APP_LED_ERROR;
			
		}
		if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
 47c:	65 e0       	ldi	r22, 0x05	; 5
 47e:	81 e4       	ldi	r24, 0x41	; 65
 480:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 484:	81 11       	cpse	r24, r1
 486:	16 c0       	rjmp	.+44     	; 0x4b4 <BLINK_3+0x68>
			return APP_LED_ERROR;
			
		}
		if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
 488:	67 e0       	ldi	r22, 0x07	; 7
 48a:	81 e4       	ldi	r24, 0x41	; 65
 48c:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 490:	81 11       	cpse	r24, r1
 492:	12 c0       	rjmp	.+36     	; 0x4b8 <BLINK_3+0x6c>
			return APP_LED_ERROR;
		}
	if(timer_delay(BLINK3_OFF) != TIMER_OK)
 494:	8c eb       	ldi	r24, 0xBC	; 188
 496:	92 e0       	ldi	r25, 0x02	; 2
 498:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 49c:	88 23       	and	r24, r24
 49e:	69 f0       	breq	.+26     	; 0x4ba <BLINK_3+0x6e>
	{
		return APP_ERROR_EXIT;
 4a0:	c4 e0       	ldi	r28, 0x04	; 4
 4a2:	0b c0       	rjmp	.+22     	; 0x4ba <BLINK_3+0x6e>

}
EN_appError_t BLINK_3(void) {
	if(blinkSetup()!= APP_OK)
	{
		return APP_ERROR_EXIT;
 4a4:	c4 e0       	ldi	r28, 0x04	; 4
 4a6:	09 c0       	rjmp	.+18     	; 0x4ba <BLINK_3+0x6e>
	}
if(timer_delay(BLINK3_ON) != TIMER_OK)
{
	return APP_ERROR_EXIT;
 4a8:	c4 e0       	ldi	r28, 0x04	; 4
 4aa:	07 c0       	rjmp	.+14     	; 0x4ba <BLINK_3+0x6e>
}
		if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
			return APP_LED_ERROR;
 4ac:	c1 e0       	ldi	r28, 0x01	; 1
 4ae:	05 c0       	rjmp	.+10     	; 0x4ba <BLINK_3+0x6e>
			
		}
		if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
			return APP_LED_ERROR;
 4b0:	c1 e0       	ldi	r28, 0x01	; 1
 4b2:	03 c0       	rjmp	.+6      	; 0x4ba <BLINK_3+0x6e>
			
		}
		if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
			return APP_LED_ERROR;
 4b4:	c1 e0       	ldi	r28, 0x01	; 1
 4b6:	01 c0       	rjmp	.+2      	; 0x4ba <BLINK_3+0x6e>
			
		}
		if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
			return APP_LED_ERROR;
 4b8:	c1 e0       	ldi	r28, 0x01	; 1
	{
		return APP_ERROR_EXIT;
	}
return APP_OK;

}
 4ba:	8c 2f       	mov	r24, r28
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <BLINK_4>:

EN_appError_t BLINK_4(void) {
 4c0:	cf 93       	push	r28
	if(blinkSetup()!= APP_OK)
 4c2:	0e 94 ca 00 	call	0x194	; 0x194 <blinkSetup>
 4c6:	c8 2f       	mov	r28, r24
 4c8:	81 11       	cpse	r24, r1
 4ca:	26 c0       	rjmp	.+76     	; 0x518 <BLINK_4+0x58>
	{
		return APP_ERROR_EXIT;
	}
	if(timer_delay(BLINK4_ON) != TIMER_OK)
 4cc:	84 ef       	ldi	r24, 0xF4	; 244
 4ce:	91 e0       	ldi	r25, 0x01	; 1
 4d0:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 4d4:	81 11       	cpse	r24, r1
 4d6:	22 c0       	rjmp	.+68     	; 0x51c <BLINK_4+0x5c>
	{
		return APP_ERROR_EXIT;
	}
			if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
 4d8:	60 e0       	ldi	r22, 0x00	; 0
 4da:	81 e4       	ldi	r24, 0x41	; 65
 4dc:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 4e0:	81 11       	cpse	r24, r1
 4e2:	1e c0       	rjmp	.+60     	; 0x520 <BLINK_4+0x60>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
 4e4:	63 e0       	ldi	r22, 0x03	; 3
 4e6:	81 e4       	ldi	r24, 0x41	; 65
 4e8:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 4ec:	81 11       	cpse	r24, r1
 4ee:	1a c0       	rjmp	.+52     	; 0x524 <BLINK_4+0x64>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
 4f0:	65 e0       	ldi	r22, 0x05	; 5
 4f2:	81 e4       	ldi	r24, 0x41	; 65
 4f4:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 4f8:	81 11       	cpse	r24, r1
 4fa:	16 c0       	rjmp	.+44     	; 0x528 <BLINK_4+0x68>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
 4fc:	67 e0       	ldi	r22, 0x07	; 7
 4fe:	81 e4       	ldi	r24, 0x41	; 65
 500:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 504:	81 11       	cpse	r24, r1
 506:	12 c0       	rjmp	.+36     	; 0x52c <BLINK_4+0x6c>
				return APP_LED_ERROR;
			}
	if(timer_delay(BLINK4_OFF) != TIMER_OK)
 508:	84 ef       	ldi	r24, 0xF4	; 244
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 510:	88 23       	and	r24, r24
 512:	69 f0       	breq	.+26     	; 0x52e <BLINK_4+0x6e>
	{
		return APP_ERROR_EXIT;
 514:	c4 e0       	ldi	r28, 0x04	; 4
 516:	0b c0       	rjmp	.+22     	; 0x52e <BLINK_4+0x6e>
}

EN_appError_t BLINK_4(void) {
	if(blinkSetup()!= APP_OK)
	{
		return APP_ERROR_EXIT;
 518:	c4 e0       	ldi	r28, 0x04	; 4
 51a:	09 c0       	rjmp	.+18     	; 0x52e <BLINK_4+0x6e>
	}
	if(timer_delay(BLINK4_ON) != TIMER_OK)
	{
		return APP_ERROR_EXIT;
 51c:	c4 e0       	ldi	r28, 0x04	; 4
 51e:	07 c0       	rjmp	.+14     	; 0x52e <BLINK_4+0x6e>
	}
			if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
				return APP_LED_ERROR;
 520:	c1 e0       	ldi	r28, 0x01	; 1
 522:	05 c0       	rjmp	.+10     	; 0x52e <BLINK_4+0x6e>
				
			}
			if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
				return APP_LED_ERROR;
 524:	c1 e0       	ldi	r28, 0x01	; 1
 526:	03 c0       	rjmp	.+6      	; 0x52e <BLINK_4+0x6e>
				
			}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
				return APP_LED_ERROR;
 528:	c1 e0       	ldi	r28, 0x01	; 1
 52a:	01 c0       	rjmp	.+2      	; 0x52e <BLINK_4+0x6e>
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
				return APP_LED_ERROR;
 52c:	c1 e0       	ldi	r28, 0x01	; 1
	{
		return APP_ERROR_EXIT;
	}
return APP_OK;

}
 52e:	8c 2f       	mov	r24, r28
 530:	cf 91       	pop	r28
 532:	08 95       	ret

00000534 <BLINK_5>:

EN_appError_t BLINK_5(void) {
 534:	cf 93       	push	r28
	
	if(blinkSetup()!= APP_OK)
 536:	0e 94 ca 00 	call	0x194	; 0x194 <blinkSetup>
 53a:	c8 2f       	mov	r28, r24
 53c:	81 11       	cpse	r24, r1
 53e:	26 c0       	rjmp	.+76     	; 0x58c <BLINK_5+0x58>
	{
		return APP_ERROR_EXIT;
	}
	
	if(timer_delay(BLINK5_ON) != TIMER_OK)
 540:	80 e2       	ldi	r24, 0x20	; 32
 542:	93 e0       	ldi	r25, 0x03	; 3
 544:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 548:	81 11       	cpse	r24, r1
 54a:	22 c0       	rjmp	.+68     	; 0x590 <BLINK_5+0x5c>
	{
		return APP_ERROR_EXIT;
	}
			if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
 54c:	60 e0       	ldi	r22, 0x00	; 0
 54e:	81 e4       	ldi	r24, 0x41	; 65
 550:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 554:	81 11       	cpse	r24, r1
 556:	1e c0       	rjmp	.+60     	; 0x594 <BLINK_5+0x60>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	81 e4       	ldi	r24, 0x41	; 65
 55c:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 560:	81 11       	cpse	r24, r1
 562:	1a c0       	rjmp	.+52     	; 0x598 <BLINK_5+0x64>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
 564:	65 e0       	ldi	r22, 0x05	; 5
 566:	81 e4       	ldi	r24, 0x41	; 65
 568:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 56c:	81 11       	cpse	r24, r1
 56e:	16 c0       	rjmp	.+44     	; 0x59c <BLINK_5+0x68>
				return APP_LED_ERROR;
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
 570:	67 e0       	ldi	r22, 0x07	; 7
 572:	81 e4       	ldi	r24, 0x41	; 65
 574:	0e 94 0e 03 	call	0x61c	; 0x61c <LED_off>
 578:	81 11       	cpse	r24, r1
 57a:	12 c0       	rjmp	.+36     	; 0x5a0 <BLINK_5+0x6c>
				return APP_LED_ERROR;
			}
	if(timer_delay(BLINK5_OFF) != TIMER_OK)
 57c:	88 ec       	ldi	r24, 0xC8	; 200
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 73 05 	call	0xae6	; 0xae6 <timer_delay>
 584:	88 23       	and	r24, r24
 586:	69 f0       	breq	.+26     	; 0x5a2 <BLINK_5+0x6e>
	{
		return APP_ERROR_EXIT;
 588:	c4 e0       	ldi	r28, 0x04	; 4
 58a:	0b c0       	rjmp	.+22     	; 0x5a2 <BLINK_5+0x6e>

EN_appError_t BLINK_5(void) {
	
	if(blinkSetup()!= APP_OK)
	{
		return APP_ERROR_EXIT;
 58c:	c4 e0       	ldi	r28, 0x04	; 4
 58e:	09 c0       	rjmp	.+18     	; 0x5a2 <BLINK_5+0x6e>
	}
	
	if(timer_delay(BLINK5_ON) != TIMER_OK)
	{
		return APP_ERROR_EXIT;
 590:	c4 e0       	ldi	r28, 0x04	; 4
 592:	07 c0       	rjmp	.+14     	; 0x5a2 <BLINK_5+0x6e>
	}
			if(LED_off(LED_1_PORT, LED_1_PIN)!= LED_OK){
				return APP_LED_ERROR;
 594:	c1 e0       	ldi	r28, 0x01	; 1
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <BLINK_5+0x6e>
				
			}
			if(LED_off(LED_2_PORT, LED_2_PIN)!= LED_OK){
				return APP_LED_ERROR;
 598:	c1 e0       	ldi	r28, 0x01	; 1
 59a:	03 c0       	rjmp	.+6      	; 0x5a2 <BLINK_5+0x6e>
				
			}
			if(LED_off(LED_3_PORT, LED_3_PIN)!= LED_OK){
				return APP_LED_ERROR;
 59c:	c1 e0       	ldi	r28, 0x01	; 1
 59e:	01 c0       	rjmp	.+2      	; 0x5a2 <BLINK_5+0x6e>
				
			}
			if(LED_off(LED_4_PORT, LED_4_PIN)!= LED_OK){
				return APP_LED_ERROR;
 5a0:	c1 e0       	ldi	r28, 0x01	; 1
	{
		return APP_ERROR_EXIT;
	}
return APP_OK;

}
 5a2:	8c 2f       	mov	r24, r28
 5a4:	cf 91       	pop	r28
 5a6:	08 95       	ret

000005a8 <APP_start>:
}

EN_appError_t APP_start(void) {

  while (1) {
    switch (currentBlink) {
 5a8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <currentBlink>
 5ac:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <currentBlink+0x1>
 5b0:	83 30       	cpi	r24, 0x03	; 3
 5b2:	91 05       	cpc	r25, r1
 5b4:	b9 f0       	breq	.+46     	; 0x5e4 <APP_start+0x3c>
 5b6:	34 f4       	brge	.+12     	; 0x5c4 <APP_start+0x1c>
 5b8:	81 30       	cpi	r24, 0x01	; 1
 5ba:	91 05       	cpc	r25, r1
 5bc:	49 f0       	breq	.+18     	; 0x5d0 <APP_start+0x28>
 5be:	02 97       	sbiw	r24, 0x02	; 2
 5c0:	61 f0       	breq	.+24     	; 0x5da <APP_start+0x32>
 5c2:	f2 cf       	rjmp	.-28     	; 0x5a8 <APP_start>
 5c4:	84 30       	cpi	r24, 0x04	; 4
 5c6:	91 05       	cpc	r25, r1
 5c8:	91 f0       	breq	.+36     	; 0x5ee <APP_start+0x46>
 5ca:	05 97       	sbiw	r24, 0x05	; 5
 5cc:	a9 f0       	breq	.+42     	; 0x5f8 <APP_start+0x50>
 5ce:	ec cf       	rjmp	.-40     	; 0x5a8 <APP_start>
    case CASE1:
     if(BLINK_1()!=APP_OK){
 5d0:	0e 94 b2 01 	call	0x364	; 0x364 <BLINK_1>
 5d4:	88 23       	and	r24, r24
 5d6:	41 f3       	breq	.-48     	; 0x5a8 <APP_start>
 5d8:	13 c0       	rjmp	.+38     	; 0x600 <APP_start+0x58>
	 return APP_ERROR_EXIT;
	 }
	 break;
	case CASE2:
	if(BLINK_2()!=APP_OK){
 5da:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <BLINK_2>
 5de:	88 23       	and	r24, r24
 5e0:	19 f3       	breq	.-58     	; 0x5a8 <APP_start>
 5e2:	0e c0       	rjmp	.+28     	; 0x600 <APP_start+0x58>
		return APP_ERROR_EXIT;
	}
	 break;
	 case CASE3:
	if(BLINK_3()!=APP_OK){
 5e4:	0e 94 26 02 	call	0x44c	; 0x44c <BLINK_3>
 5e8:	88 23       	and	r24, r24
 5ea:	f1 f2       	breq	.-68     	; 0x5a8 <APP_start>
 5ec:	09 c0       	rjmp	.+18     	; 0x600 <APP_start+0x58>
		return APP_ERROR_EXIT;
	}
	 break;
	 case CASE4:
	if(BLINK_4()!=APP_OK){
 5ee:	0e 94 60 02 	call	0x4c0	; 0x4c0 <BLINK_4>
 5f2:	88 23       	and	r24, r24
 5f4:	c9 f2       	breq	.-78     	; 0x5a8 <APP_start>
 5f6:	04 c0       	rjmp	.+8      	; 0x600 <APP_start+0x58>
		return APP_ERROR_EXIT;
	}
	 break;
	 case CASE5:
	if(BLINK_5()!=APP_OK){
 5f8:	0e 94 9a 02 	call	0x534	; 0x534 <BLINK_5>
 5fc:	88 23       	and	r24, r24
 5fe:	a1 f2       	breq	.-88     	; 0x5a8 <APP_start>

    }
    //}
  }

}
 600:	84 e0       	ldi	r24, 0x04	; 4
 602:	08 95       	ret

00000604 <BUTTON_init>:
 */ 

#include "button.h"
EN_btnError_t BUTTON_init(uint8_t buttonPort,uint8_t buttonPin)
{
	return(DIO_init(buttonPort,buttonPin,IN));
 604:	40 e0       	ldi	r20, 0x00	; 0
 606:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_init>
	
}
 60a:	08 95       	ret

0000060c <LED_init>:
 */ 

#include "led.h"

EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin){
	return(DIO_init(ledPort,ledPin,OUT));
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	0e 94 8b 03 	call	0x716	; 0x716 <DIO_init>
}
 612:	08 95       	ret

00000614 <LED_on>:
EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin){
	return(DIO_write(ledPort,ledPin,HIGH));
 614:	41 e0       	ldi	r20, 0x01	; 1
 616:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <DIO_write>
}
 61a:	08 95       	ret

0000061c <LED_off>:
EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin){
	return(DIO_write(ledPort,ledPin,LOW));
 61c:	40 e0       	ldi	r20, 0x00	; 0
 61e:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <DIO_write>
}
 622:	08 95       	ret

00000624 <main>:
	
	//test_dio();
	//test_app();
	
	
	APP_init();
 624:	0e 94 7a 00 	call	0xf4	; 0xf4 <APP_init>
	
	APP_start();
 628:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <APP_start>
	
}
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	08 95       	ret

00000632 <CLEAR_BIT>:
// function definitions
#include "dio.h"


void CLEAR_BIT(uint8_t portNumber,uint8_t pinNumber){
	switch(portNumber){
 632:	82 34       	cpi	r24, 0x42	; 66
 634:	a9 f0       	breq	.+42     	; 0x660 <CLEAR_BIT+0x2e>
 636:	18 f4       	brcc	.+6      	; 0x63e <CLEAR_BIT+0xc>
 638:	81 34       	cpi	r24, 0x41	; 65
 63a:	31 f0       	breq	.+12     	; 0x648 <CLEAR_BIT+0x16>
 63c:	08 95       	ret
 63e:	83 34       	cpi	r24, 0x43	; 67
 640:	d9 f0       	breq	.+54     	; 0x678 <CLEAR_BIT+0x46>
 642:	84 34       	cpi	r24, 0x44	; 68
 644:	29 f1       	breq	.+74     	; 0x690 <CLEAR_BIT+0x5e>
 646:	08 95       	ret
		case PORT_A:{
			DDRA&=~(1<<pinNumber);
 648:	2a b3       	in	r18, 0x1a	; 26
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	02 c0       	rjmp	.+4      	; 0x654 <CLEAR_BIT+0x22>
 650:	88 0f       	add	r24, r24
 652:	99 1f       	adc	r25, r25
 654:	6a 95       	dec	r22
 656:	e2 f7       	brpl	.-8      	; 0x650 <CLEAR_BIT+0x1e>
 658:	80 95       	com	r24
 65a:	82 23       	and	r24, r18
 65c:	8a bb       	out	0x1a, r24	; 26
			break;
 65e:	08 95       	ret
		}
		
		case PORT_B:{
			DDRB&=~(1<<pinNumber);
 660:	27 b3       	in	r18, 0x17	; 23
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	90 e0       	ldi	r25, 0x00	; 0
 666:	02 c0       	rjmp	.+4      	; 0x66c <CLEAR_BIT+0x3a>
 668:	88 0f       	add	r24, r24
 66a:	99 1f       	adc	r25, r25
 66c:	6a 95       	dec	r22
 66e:	e2 f7       	brpl	.-8      	; 0x668 <CLEAR_BIT+0x36>
 670:	80 95       	com	r24
 672:	82 23       	and	r24, r18
 674:	87 bb       	out	0x17, r24	; 23
			break;
 676:	08 95       	ret
		}
		case PORT_C:{
			DDRC&=~(1<<pinNumber);
 678:	24 b3       	in	r18, 0x14	; 20
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	02 c0       	rjmp	.+4      	; 0x684 <CLEAR_BIT+0x52>
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	6a 95       	dec	r22
 686:	e2 f7       	brpl	.-8      	; 0x680 <CLEAR_BIT+0x4e>
 688:	80 95       	com	r24
 68a:	82 23       	and	r24, r18
 68c:	84 bb       	out	0x14, r24	; 20
			break;
 68e:	08 95       	ret
		}
		case PORT_D:{
			DDRD&=~(1<<pinNumber);
 690:	21 b3       	in	r18, 0x11	; 17
 692:	81 e0       	ldi	r24, 0x01	; 1
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	02 c0       	rjmp	.+4      	; 0x69c <CLEAR_BIT+0x6a>
 698:	88 0f       	add	r24, r24
 69a:	99 1f       	adc	r25, r25
 69c:	6a 95       	dec	r22
 69e:	e2 f7       	brpl	.-8      	; 0x698 <CLEAR_BIT+0x66>
 6a0:	80 95       	com	r24
 6a2:	82 23       	and	r24, r18
 6a4:	81 bb       	out	0x11, r24	; 17
 6a6:	08 95       	ret

000006a8 <SET_BIT>:
			break;
		}
	}
}
void SET_BIT(uint8_t portNumber,uint8_t pinNumber){
		switch(portNumber){
 6a8:	82 34       	cpi	r24, 0x42	; 66
 6aa:	a1 f0       	breq	.+40     	; 0x6d4 <SET_BIT+0x2c>
 6ac:	18 f4       	brcc	.+6      	; 0x6b4 <SET_BIT+0xc>
 6ae:	81 34       	cpi	r24, 0x41	; 65
 6b0:	31 f0       	breq	.+12     	; 0x6be <SET_BIT+0x16>
 6b2:	08 95       	ret
 6b4:	83 34       	cpi	r24, 0x43	; 67
 6b6:	c9 f0       	breq	.+50     	; 0x6ea <SET_BIT+0x42>
 6b8:	84 34       	cpi	r24, 0x44	; 68
 6ba:	11 f1       	breq	.+68     	; 0x700 <SET_BIT+0x58>
 6bc:	08 95       	ret
			case PORT_A:{
				DDRA|=(1<<pinNumber);
 6be:	2a b3       	in	r18, 0x1a	; 26
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	02 c0       	rjmp	.+4      	; 0x6ca <SET_BIT+0x22>
 6c6:	88 0f       	add	r24, r24
 6c8:	99 1f       	adc	r25, r25
 6ca:	6a 95       	dec	r22
 6cc:	e2 f7       	brpl	.-8      	; 0x6c6 <SET_BIT+0x1e>
 6ce:	82 2b       	or	r24, r18
 6d0:	8a bb       	out	0x1a, r24	; 26
				break;
 6d2:	08 95       	ret
			}
			
			case PORT_B:{
				DDRB|=(1<<pinNumber);
 6d4:	27 b3       	in	r18, 0x17	; 23
 6d6:	81 e0       	ldi	r24, 0x01	; 1
 6d8:	90 e0       	ldi	r25, 0x00	; 0
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <SET_BIT+0x38>
 6dc:	88 0f       	add	r24, r24
 6de:	99 1f       	adc	r25, r25
 6e0:	6a 95       	dec	r22
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <SET_BIT+0x34>
 6e4:	82 2b       	or	r24, r18
 6e6:	87 bb       	out	0x17, r24	; 23
				break;
 6e8:	08 95       	ret
			}
			case PORT_C:{
				DDRC|=(1<<pinNumber);
 6ea:	24 b3       	in	r18, 0x14	; 20
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <SET_BIT+0x4e>
 6f2:	88 0f       	add	r24, r24
 6f4:	99 1f       	adc	r25, r25
 6f6:	6a 95       	dec	r22
 6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <SET_BIT+0x4a>
 6fa:	82 2b       	or	r24, r18
 6fc:	84 bb       	out	0x14, r24	; 20
				break;
 6fe:	08 95       	ret
			}
			case PORT_D:{
				DDRD|=(1<<pinNumber);
 700:	21 b3       	in	r18, 0x11	; 17
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	02 c0       	rjmp	.+4      	; 0x70c <SET_BIT+0x64>
 708:	88 0f       	add	r24, r24
 70a:	99 1f       	adc	r25, r25
 70c:	6a 95       	dec	r22
 70e:	e2 f7       	brpl	.-8      	; 0x708 <SET_BIT+0x60>
 710:	82 2b       	or	r24, r18
 712:	81 bb       	out	0x11, r24	; 17
 714:	08 95       	ret

00000716 <DIO_init>:
		}
	}

EN_dioError_t DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction)
{
		if(pinNumber>7||pinNumber<0)
 716:	68 30       	cpi	r22, 0x08	; 8
 718:	d8 f5       	brcc	.+118    	; 0x790 <DIO_init+0x7a>
		{
		return DIO_INVALID_PIN;
		}
		
	switch(portNumber){
 71a:	82 34       	cpi	r24, 0x42	; 66
 71c:	a9 f0       	breq	.+42     	; 0x748 <DIO_init+0x32>
 71e:	18 f4       	brcc	.+6      	; 0x726 <DIO_init+0x10>
 720:	81 34       	cpi	r24, 0x41	; 65
 722:	31 f0       	breq	.+12     	; 0x730 <DIO_init+0x1a>
 724:	37 c0       	rjmp	.+110    	; 0x794 <DIO_init+0x7e>
 726:	83 34       	cpi	r24, 0x43	; 67
 728:	d9 f0       	breq	.+54     	; 0x760 <DIO_init+0x4a>
 72a:	84 34       	cpi	r24, 0x44	; 68
 72c:	29 f1       	breq	.+74     	; 0x778 <DIO_init+0x62>
 72e:	32 c0       	rjmp	.+100    	; 0x794 <DIO_init+0x7e>
		case PORT_A:
		{
			if(direction == IN){
 730:	41 11       	cpse	r20, r1
 732:	04 c0       	rjmp	.+8      	; 0x73c <DIO_init+0x26>
				CLEAR_BIT(portNumber,pinNumber);
 734:	0e 94 19 03 	call	0x632	; 0x632 <CLEAR_BIT>
				return DIO_OK;
 738:	80 e0       	ldi	r24, 0x00	; 0
 73a:	08 95       	ret
			}
			else if(direction == OUT){
 73c:	41 30       	cpi	r20, 0x01	; 1
 73e:	61 f5       	brne	.+88     	; 0x798 <DIO_init+0x82>
				SET_BIT(portNumber,pinNumber);
 740:	0e 94 54 03 	call	0x6a8	; 0x6a8 <SET_BIT>
				return DIO_OK;
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	08 95       	ret
			break;
		}
		
		case PORT_B:
		{
			if(direction==IN){
 748:	41 11       	cpse	r20, r1
 74a:	04 c0       	rjmp	.+8      	; 0x754 <DIO_init+0x3e>
				CLEAR_BIT(portNumber,pinNumber);
 74c:	0e 94 19 03 	call	0x632	; 0x632 <CLEAR_BIT>
				        return DIO_OK;
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	08 95       	ret
				        
			}
			else if(direction==OUT){
 754:	41 30       	cpi	r20, 0x01	; 1
 756:	11 f5       	brne	.+68     	; 0x79c <DIO_init+0x86>
				SET_BIT(portNumber,pinNumber);
 758:	0e 94 54 03 	call	0x6a8	; 0x6a8 <SET_BIT>
				        return DIO_OK;
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	08 95       	ret
			break;
		}
		
		case PORT_C:
		{
			if(direction==IN){
 760:	41 11       	cpse	r20, r1
 762:	04 c0       	rjmp	.+8      	; 0x76c <DIO_init+0x56>
				CLEAR_BIT(portNumber,pinNumber);
 764:	0e 94 19 03 	call	0x632	; 0x632 <CLEAR_BIT>
				        return DIO_OK;
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	08 95       	ret
				        
			}
			else if(direction==OUT){
 76c:	41 30       	cpi	r20, 0x01	; 1
 76e:	c1 f4       	brne	.+48     	; 0x7a0 <DIO_init+0x8a>
				SET_BIT(portNumber,pinNumber);
 770:	0e 94 54 03 	call	0x6a8	; 0x6a8 <SET_BIT>
				        return DIO_OK;
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	08 95       	ret
			break;
		}
		
		case PORT_D:
		{
			if(direction==IN){
 778:	41 11       	cpse	r20, r1
 77a:	04 c0       	rjmp	.+8      	; 0x784 <DIO_init+0x6e>
				CLEAR_BIT(portNumber,pinNumber);
 77c:	0e 94 19 03 	call	0x632	; 0x632 <CLEAR_BIT>
				return DIO_OK;
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	08 95       	ret
			}
			else if(direction==OUT){
 784:	41 30       	cpi	r20, 0x01	; 1
 786:	71 f4       	brne	.+28     	; 0x7a4 <DIO_init+0x8e>
				SET_BIT(portNumber,pinNumber);
 788:	0e 94 54 03 	call	0x6a8	; 0x6a8 <SET_BIT>
				        return DIO_OK;
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	08 95       	ret

EN_dioError_t DIO_init(uint8_t portNumber,uint8_t pinNumber,uint8_t direction)
{
		if(pinNumber>7||pinNumber<0)
		{
		return DIO_INVALID_PIN;
 790:	82 e0       	ldi	r24, 0x02	; 2
 792:	08 95       	ret
				return DIO_INVALID_INIT;
			}
			break;
		}
		default:{
			return DIO_INVALID_PORT;
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	08 95       	ret
			else if(direction == OUT){
				SET_BIT(portNumber,pinNumber);
				return DIO_OK;
			}
			else{
				return DIO_INVALID_INIT;
 798:	83 e0       	ldi	r24, 0x03	; 3
 79a:	08 95       	ret
				SET_BIT(portNumber,pinNumber);
				        return DIO_OK;
				        
			}
			else{
				return DIO_INVALID_INIT;
 79c:	83 e0       	ldi	r24, 0x03	; 3
 79e:	08 95       	ret
				SET_BIT(portNumber,pinNumber);
				        return DIO_OK;
				        
			}
			else{
				return DIO_INVALID_INIT;
 7a0:	83 e0       	ldi	r24, 0x03	; 3
 7a2:	08 95       	ret
			else if(direction==OUT){
				SET_BIT(portNumber,pinNumber);
				        return DIO_OK;
			}
			else{
				return DIO_INVALID_INIT;
 7a4:	83 e0       	ldi	r24, 0x03	; 3
			return DIO_INVALID_PORT;
		}	
	}
			return DIO_INVALID_PORT;
			
}
 7a6:	08 95       	ret

000007a8 <DIO_write>:

EN_dioError_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	if(pinNumber>7||pinNumber<0)
 7a8:	68 30       	cpi	r22, 0x08	; 8
 7aa:	08 f0       	brcs	.+2      	; 0x7ae <DIO_write+0x6>
 7ac:	83 c0       	rjmp	.+262    	; 0x8b4 <__stack+0x55>
	{
		return DIO_INVALID_PIN;

	}
	switch(portNumber)
 7ae:	82 34       	cpi	r24, 0x42	; 66
 7b0:	49 f1       	breq	.+82     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
 7b2:	18 f4       	brcc	.+6      	; 0x7ba <DIO_write+0x12>
 7b4:	81 34       	cpi	r24, 0x41	; 65
 7b6:	41 f0       	breq	.+16     	; 0x7c8 <DIO_write+0x20>
 7b8:	7f c0       	rjmp	.+254    	; 0x8b8 <__stack+0x59>
 7ba:	83 34       	cpi	r24, 0x43	; 67
 7bc:	09 f4       	brne	.+2      	; 0x7c0 <DIO_write+0x18>
 7be:	40 c0       	rjmp	.+128    	; 0x840 <__DATA_REGION_LENGTH__+0x40>
 7c0:	84 34       	cpi	r24, 0x44	; 68
 7c2:	09 f4       	brne	.+2      	; 0x7c6 <DIO_write+0x1e>
 7c4:	5a c0       	rjmp	.+180    	; 0x87a <__stack+0x1b>
 7c6:	78 c0       	rjmp	.+240    	; 0x8b8 <__stack+0x59>
	{
		case PORT_A:{
			if(value==LOW){
 7c8:	41 11       	cpse	r20, r1
 7ca:	0d c0       	rjmp	.+26     	; 0x7e6 <DIO_write+0x3e>
				PORTA&=~(1<<pinNumber); 
 7cc:	2b b3       	in	r18, 0x1b	; 27
 7ce:	81 e0       	ldi	r24, 0x01	; 1
 7d0:	90 e0       	ldi	r25, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_write+0x30>
 7d4:	88 0f       	add	r24, r24
 7d6:	99 1f       	adc	r25, r25
 7d8:	6a 95       	dec	r22
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_write+0x2c>
 7dc:	80 95       	com	r24
 7de:	82 23       	and	r24, r18
 7e0:	8b bb       	out	0x1b, r24	; 27
			 return DIO_OK;
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	08 95       	ret
			}
			else if(value==HIGH){
 7e6:	41 30       	cpi	r20, 0x01	; 1
 7e8:	09 f0       	breq	.+2      	; 0x7ec <DIO_write+0x44>
 7ea:	68 c0       	rjmp	.+208    	; 0x8bc <__stack+0x5d>
				PORTA|=(1<<pinNumber);
 7ec:	2b b3       	in	r18, 0x1b	; 27
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <DIO_write+0x50>
 7f4:	88 0f       	add	r24, r24
 7f6:	99 1f       	adc	r25, r25
 7f8:	6a 95       	dec	r22
 7fa:	e2 f7       	brpl	.-8      	; 0x7f4 <DIO_write+0x4c>
 7fc:	82 2b       	or	r24, r18
 7fe:	8b bb       	out	0x1b, r24	; 27
			 return DIO_OK;
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret
			}
			break;
		}
		
		case PORT_B:{
			if(value==LOW){
 804:	41 11       	cpse	r20, r1
 806:	0d c0       	rjmp	.+26     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
				PORTB&=~(1<<pinNumber);
 808:	28 b3       	in	r18, 0x18	; 24
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	02 c0       	rjmp	.+4      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
 810:	88 0f       	add	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	6a 95       	dec	r22
 816:	e2 f7       	brpl	.-8      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
 818:	80 95       	com	r24
 81a:	82 23       	and	r24, r18
 81c:	88 bb       	out	0x18, r24	; 24
			 return DIO_OK;
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	08 95       	ret
			 
			}
			else if(value==HIGH){
 822:	41 30       	cpi	r20, 0x01	; 1
 824:	09 f0       	breq	.+2      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 826:	4c c0       	rjmp	.+152    	; 0x8c0 <__stack+0x61>
				PORTB|=(1<<pinNumber);
 828:	28 b3       	in	r18, 0x18	; 24
 82a:	81 e0       	ldi	r24, 0x01	; 1
 82c:	90 e0       	ldi	r25, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <__DATA_REGION_LENGTH__+0x34>
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	6a 95       	dec	r22
 836:	e2 f7       	brpl	.-8      	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 838:	82 2b       	or	r24, r18
 83a:	88 bb       	out	0x18, r24	; 24
			 return DIO_OK;
 83c:	80 e0       	ldi	r24, 0x00	; 0
 83e:	08 95       	ret
			}
			break;
		}
		
		case PORT_C:{
			if(value==LOW){
 840:	41 11       	cpse	r20, r1
 842:	0d c0       	rjmp	.+26     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
				PORTC&=~(1<<pinNumber);
 844:	25 b3       	in	r18, 0x15	; 21
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	90 e0       	ldi	r25, 0x00	; 0
 84a:	02 c0       	rjmp	.+4      	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 84c:	88 0f       	add	r24, r24
 84e:	99 1f       	adc	r25, r25
 850:	6a 95       	dec	r22
 852:	e2 f7       	brpl	.-8      	; 0x84c <__DATA_REGION_LENGTH__+0x4c>
 854:	80 95       	com	r24
 856:	82 23       	and	r24, r18
 858:	85 bb       	out	0x15, r24	; 21
			 return DIO_OK;
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	08 95       	ret
			 
			}
			else if(value==HIGH){
 85e:	41 30       	cpi	r20, 0x01	; 1
 860:	89 f5       	brne	.+98     	; 0x8c4 <__stack+0x65>
				PORTC|=(1<<pinNumber);
 862:	25 b3       	in	r18, 0x15	; 21
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	90 e0       	ldi	r25, 0x00	; 0
 868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
 86a:	88 0f       	add	r24, r24
 86c:	99 1f       	adc	r25, r25
 86e:	6a 95       	dec	r22
 870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
 872:	82 2b       	or	r24, r18
 874:	85 bb       	out	0x15, r24	; 21
			 return DIO_OK;
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	08 95       	ret
			}
			break;
		}
		
		case PORT_D:{
			if(value == LOW)
 87a:	41 11       	cpse	r20, r1
 87c:	0d c0       	rjmp	.+26     	; 0x898 <__stack+0x39>
			{
				PORTD&=~(1<<pinNumber);
 87e:	22 b3       	in	r18, 0x12	; 18
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	02 c0       	rjmp	.+4      	; 0x88a <__stack+0x2b>
 886:	88 0f       	add	r24, r24
 888:	99 1f       	adc	r25, r25
 88a:	6a 95       	dec	r22
 88c:	e2 f7       	brpl	.-8      	; 0x886 <__stack+0x27>
 88e:	80 95       	com	r24
 890:	82 23       	and	r24, r18
 892:	82 bb       	out	0x12, r24	; 18
			 return DIO_OK;
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	08 95       	ret
			 
			}
			else if(value == HIGH)
 898:	41 30       	cpi	r20, 0x01	; 1
 89a:	b1 f4       	brne	.+44     	; 0x8c8 <__stack+0x69>
			{
			PORTD|=(1<<pinNumber);
 89c:	22 b3       	in	r18, 0x12	; 18
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	90 e0       	ldi	r25, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <__stack+0x49>
 8a4:	88 0f       	add	r24, r24
 8a6:	99 1f       	adc	r25, r25
 8a8:	6a 95       	dec	r22
 8aa:	e2 f7       	brpl	.-8      	; 0x8a4 <__stack+0x45>
 8ac:	82 2b       	or	r24, r18
 8ae:	82 bb       	out	0x12, r24	; 18
			return DIO_OK;
 8b0:	80 e0       	ldi	r24, 0x00	; 0
 8b2:	08 95       	ret
}

EN_dioError_t DIO_write(uint8_t portNumber,uint8_t pinNumber,uint8_t value){
	if(pinNumber>7||pinNumber<0)
	{
		return DIO_INVALID_PIN;
 8b4:	82 e0       	ldi	r24, 0x02	; 2
 8b6:	08 95       	ret
				return DIO_INVALID_VALUE;
			}
			break;
		}
		default:{
			return DIO_INVALID_PORT;
 8b8:	81 e0       	ldi	r24, 0x01	; 1
 8ba:	08 95       	ret
				PORTA|=(1<<pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
 8bc:	84 e0       	ldi	r24, 0x04	; 4
 8be:	08 95       	ret
				PORTB|=(1<<pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
 8c0:	84 e0       	ldi	r24, 0x04	; 4
 8c2:	08 95       	ret
				PORTC|=(1<<pinNumber);
			 return DIO_OK;
			 
			}
			else{
				return DIO_INVALID_VALUE;
 8c4:	84 e0       	ldi	r24, 0x04	; 4
 8c6:	08 95       	ret
			{
			PORTD|=(1<<pinNumber);
			return DIO_OK;
			}
			else{
				return DIO_INVALID_VALUE;
 8c8:	84 e0       	ldi	r24, 0x04	; 4
		}
		default:{
			return DIO_INVALID_PORT;
		}
	}
}
 8ca:	08 95       	ret

000008cc <enable_external_interrupt0>:
}
// Disable global interrupts
void disable_Global_interrupt(void)
{
	
	cli();
 8cc:	8b b7       	in	r24, 0x3b	; 59
 8ce:	80 64       	ori	r24, 0x40	; 64
 8d0:	8b bf       	out	0x3b, r24	; 59
 8d2:	08 95       	ret

000008d4 <enable_external_interrupt1>:
 8d4:	8b b7       	in	r24, 0x3b	; 59
 8d6:	80 68       	ori	r24, 0x80	; 128
 8d8:	8b bf       	out	0x3b, r24	; 59
 8da:	08 95       	ret

000008dc <extInt0_rising>:
 8dc:	85 b7       	in	r24, 0x35	; 53
 8de:	83 60       	ori	r24, 0x03	; 3
 8e0:	85 bf       	out	0x35, r24	; 53
 8e2:	08 95       	ret

000008e4 <extInt1_rising>:
 8e4:	85 b7       	in	r24, 0x35	; 53
 8e6:	88 60       	ori	r24, 0x08	; 8
 8e8:	85 bf       	out	0x35, r24	; 53
 8ea:	85 b7       	in	r24, 0x35	; 53
 8ec:	84 60       	ori	r24, 0x04	; 4
 8ee:	85 bf       	out	0x35, r24	; 53
 8f0:	08 95       	ret

000008f2 <enable_Global_interrupt>:
 8f2:	78 94       	sei
 8f4:	08 95       	ret

000008f6 <EXI0_SetCallBack>:
}

//Callback functions
void EXI0_SetCallBack(void(*LocalPtr)(void))
{
	INT0_CallBack_ptr=LocalPtr;
 8f6:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <INT0_CallBack_ptr+0x1>
 8fa:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <INT0_CallBack_ptr>
 8fe:	08 95       	ret

00000900 <EXI1_SetCallBack>:
}

/************************************Call back functions*********************************************/
void EXI1_SetCallBack(void(*LocalPtr)(void))
{
	INT1_CallBack_ptr=LocalPtr;
 900:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <INT1_CallBack_ptr+0x1>
 904:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <INT1_CallBack_ptr>
 908:	08 95       	ret

0000090a <__vector_1>:
}

//ISR functions for EXI0, and EXI1
ISR(EXT_INT_0)
{
 90a:	1f 92       	push	r1
 90c:	0f 92       	push	r0
 90e:	0f b6       	in	r0, 0x3f	; 63
 910:	0f 92       	push	r0
 912:	11 24       	eor	r1, r1
 914:	2f 93       	push	r18
 916:	3f 93       	push	r19
 918:	4f 93       	push	r20
 91a:	5f 93       	push	r21
 91c:	6f 93       	push	r22
 91e:	7f 93       	push	r23
 920:	8f 93       	push	r24
 922:	9f 93       	push	r25
 924:	af 93       	push	r26
 926:	bf 93       	push	r27
 928:	ef 93       	push	r30
 92a:	ff 93       	push	r31
	if (INT0_CallBack_ptr!=NULLPTR)
 92c:	e0 91 6a 00 	lds	r30, 0x006A	; 0x80006a <INT0_CallBack_ptr>
 930:	f0 91 6b 00 	lds	r31, 0x006B	; 0x80006b <INT0_CallBack_ptr+0x1>
 934:	30 97       	sbiw	r30, 0x00	; 0
 936:	09 f0       	breq	.+2      	; 0x93a <__vector_1+0x30>
	{
		INT0_CallBack_ptr();
 938:	09 95       	icall
	}
}
 93a:	ff 91       	pop	r31
 93c:	ef 91       	pop	r30
 93e:	bf 91       	pop	r27
 940:	af 91       	pop	r26
 942:	9f 91       	pop	r25
 944:	8f 91       	pop	r24
 946:	7f 91       	pop	r23
 948:	6f 91       	pop	r22
 94a:	5f 91       	pop	r21
 94c:	4f 91       	pop	r20
 94e:	3f 91       	pop	r19
 950:	2f 91       	pop	r18
 952:	0f 90       	pop	r0
 954:	0f be       	out	0x3f, r0	; 63
 956:	0f 90       	pop	r0
 958:	1f 90       	pop	r1
 95a:	18 95       	reti

0000095c <__vector_2>:
ISR(EXT_INT_1)
{
 95c:	1f 92       	push	r1
 95e:	0f 92       	push	r0
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	0f 92       	push	r0
 964:	11 24       	eor	r1, r1
 966:	2f 93       	push	r18
 968:	3f 93       	push	r19
 96a:	4f 93       	push	r20
 96c:	5f 93       	push	r21
 96e:	6f 93       	push	r22
 970:	7f 93       	push	r23
 972:	8f 93       	push	r24
 974:	9f 93       	push	r25
 976:	af 93       	push	r26
 978:	bf 93       	push	r27
 97a:	ef 93       	push	r30
 97c:	ff 93       	push	r31
	if (INT1_CallBack_ptr!=NULLPTR)
 97e:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <INT1_CallBack_ptr>
 982:	f0 91 69 00 	lds	r31, 0x0069	; 0x800069 <INT1_CallBack_ptr+0x1>
 986:	30 97       	sbiw	r30, 0x00	; 0
 988:	09 f0       	breq	.+2      	; 0x98c <__vector_2+0x30>
	{
		INT1_CallBack_ptr();
 98a:	09 95       	icall
	}
 98c:	ff 91       	pop	r31
 98e:	ef 91       	pop	r30
 990:	bf 91       	pop	r27
 992:	af 91       	pop	r26
 994:	9f 91       	pop	r25
 996:	8f 91       	pop	r24
 998:	7f 91       	pop	r23
 99a:	6f 91       	pop	r22
 99c:	5f 91       	pop	r21
 99e:	4f 91       	pop	r20
 9a0:	3f 91       	pop	r19
 9a2:	2f 91       	pop	r18
 9a4:	0f 90       	pop	r0
 9a6:	0f be       	out	0x3f, r0	; 63
 9a8:	0f 90       	pop	r0
 9aa:	1f 90       	pop	r1
 9ac:	18 95       	reti

000009ae <timer0_mode>:
#include "timer.h"

EN_TimerError_t timer0_mode(uint8_t mode)
{
	
	if(mode == 0) //Normal mode
 9ae:	81 11       	cpse	r24, r1
 9b0:	08 c0       	rjmp	.+16     	; 0x9c2 <timer0_mode+0x14>
	{
		 TCCR0 &= ~(1<<WGM00);
 9b2:	83 b7       	in	r24, 0x33	; 51
 9b4:	8f 7b       	andi	r24, 0xBF	; 191
 9b6:	83 bf       	out	0x33, r24	; 51
		 TCCR0 &= ~(1<<WGM01);
 9b8:	83 b7       	in	r24, 0x33	; 51
 9ba:	87 7f       	andi	r24, 0xF7	; 247
 9bc:	83 bf       	out	0x33, r24	; 51
		 return TIMER_OK;
 9be:	80 e0       	ldi	r24, 0x00	; 0
 9c0:	08 95       	ret
	}
	else if(mode ==1) //CTC mode
 9c2:	81 30       	cpi	r24, 0x01	; 1
 9c4:	41 f4       	brne	.+16     	; 0x9d6 <timer0_mode+0x28>
	{
		 TCCR0 &= ~(1<<WGM00);
 9c6:	83 b7       	in	r24, 0x33	; 51
 9c8:	8f 7b       	andi	r24, 0xBF	; 191
 9ca:	83 bf       	out	0x33, r24	; 51
		 TCCR0 |=(1<<WGM01);
 9cc:	83 b7       	in	r24, 0x33	; 51
 9ce:	88 60       	ori	r24, 0x08	; 8
 9d0:	83 bf       	out	0x33, r24	; 51
		 return TIMER_OK;
 9d2:	80 e0       	ldi	r24, 0x00	; 0
 9d4:	08 95       	ret
		 
	}
	else if(mode ==2) //PWM mode
 9d6:	82 30       	cpi	r24, 0x02	; 2
 9d8:	41 f4       	brne	.+16     	; 0x9ea <timer0_mode+0x3c>
	{
		 TCCR0  |=(1<<WGM00);
 9da:	83 b7       	in	r24, 0x33	; 51
 9dc:	80 64       	ori	r24, 0x40	; 64
 9de:	83 bf       	out	0x33, r24	; 51
		 TCCR0 &= ~(1<<WGM01);
 9e0:	83 b7       	in	r24, 0x33	; 51
 9e2:	87 7f       	andi	r24, 0xF7	; 247
 9e4:	83 bf       	out	0x33, r24	; 51
		 return TIMER_OK;
 9e6:	80 e0       	ldi	r24, 0x00	; 0
 9e8:	08 95       	ret
		 
	}
	else if(mode ==3) //FAST PWM mode
 9ea:	83 30       	cpi	r24, 0x03	; 3
 9ec:	41 f4       	brne	.+16     	; 0x9fe <timer0_mode+0x50>
	{
		TCCR0 |=(1<<WGM00);
 9ee:	83 b7       	in	r24, 0x33	; 51
 9f0:	80 64       	ori	r24, 0x40	; 64
 9f2:	83 bf       	out	0x33, r24	; 51
		TCCR0 |=(1<<WGM01);
 9f4:	83 b7       	in	r24, 0x33	; 51
 9f6:	88 60       	ori	r24, 0x08	; 8
 9f8:	83 bf       	out	0x33, r24	; 51
		 return TIMER_OK;
 9fa:	80 e0       	ldi	r24, 0x00	; 0
 9fc:	08 95       	ret
		 
	}
	else
	{
				 return TIMER_INVALID_MODE;
 9fe:	81 e0       	ldi	r24, 0x01	; 1

	}
	
	
}
 a00:	08 95       	ret

00000a02 <timer0_set_initial>:



void timer0_set_initial(void){
	
	  	TCNT0 = 0x00;
 a02:	12 be       	out	0x32, r1	; 50
 a04:	08 95       	ret

00000a06 <timer0_prescalar>:
EN_TimerError_t timer0_prescalar(uint8_t prescalar)
{
	
	
		
		if(prescalar == 0) //Timer stop
 a06:	81 11       	cpse	r24, r1
 a08:	0b c0       	rjmp	.+22     	; 0xa20 <timer0_prescalar+0x1a>
		{
			TCCR0 &= ~(1 << CS00);  // Set bit CS00 to 0
 a0a:	83 b7       	in	r24, 0x33	; 51
 a0c:	8e 7f       	andi	r24, 0xFE	; 254
 a0e:	83 bf       	out	0x33, r24	; 51
			TCCR0 &= ~(1 << CS01); // Clear bit CS01 to 0
 a10:	83 b7       	in	r24, 0x33	; 51
 a12:	8d 7f       	andi	r24, 0xFD	; 253
 a14:	83 bf       	out	0x33, r24	; 51
			TCCR0 &= ~(1 << CS02); // Clear bit CS02 to 0
 a16:	83 b7       	in	r24, 0x33	; 51
 a18:	8b 7f       	andi	r24, 0xFB	; 251
 a1a:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 a1c:	80 e0       	ldi	r24, 0x00	; 0
 a1e:	08 95       	ret
		  

		}
		else if(prescalar ==1) // No prescalling
 a20:	81 30       	cpi	r24, 0x01	; 1
 a22:	59 f4       	brne	.+22     	; 0xa3a <timer0_prescalar+0x34>
		{
			TCCR0 |= (1 << CS00);  // Set bit CS00 to 1
 a24:	83 b7       	in	r24, 0x33	; 51
 a26:	81 60       	ori	r24, 0x01	; 1
 a28:	83 bf       	out	0x33, r24	; 51
			TCCR0 &= ~(1 << CS01); // Clear bit CS01 to 0
 a2a:	83 b7       	in	r24, 0x33	; 51
 a2c:	8d 7f       	andi	r24, 0xFD	; 253
 a2e:	83 bf       	out	0x33, r24	; 51
			TCCR0 &= ~(1 << CS02); // Clear bit CS02 to 0
 a30:	83 b7       	in	r24, 0x33	; 51
 a32:	8b 7f       	andi	r24, 0xFB	; 251
 a34:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 a36:	80 e0       	ldi	r24, 0x00	; 0
 a38:	08 95       	ret
		  

		}
		else if(prescalar ==2) //Prescalar of 8 
 a3a:	82 30       	cpi	r24, 0x02	; 2
 a3c:	59 f4       	brne	.+22     	; 0xa54 <timer0_prescalar+0x4e>
		{
				TCCR0 &= ~(1 << CS00);  // Set bit CS00 to 0
 a3e:	83 b7       	in	r24, 0x33	; 51
 a40:	8e 7f       	andi	r24, 0xFE	; 254
 a42:	83 bf       	out	0x33, r24	; 51
				TCCR0 |= (1 << CS01); // Clear bit CS01 to 1
 a44:	83 b7       	in	r24, 0x33	; 51
 a46:	82 60       	ori	r24, 0x02	; 2
 a48:	83 bf       	out	0x33, r24	; 51
				TCCR0 &= ~(1 << CS02); // Clear bit CS02 to 0
 a4a:	83 b7       	in	r24, 0x33	; 51
 a4c:	8b 7f       	andi	r24, 0xFB	; 251
 a4e:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 a50:	80 e0       	ldi	r24, 0x00	; 0
 a52:	08 95       	ret
		  

		}
		else if(prescalar ==3) //Prescalar of 64
 a54:	83 30       	cpi	r24, 0x03	; 3
 a56:	59 f4       	brne	.+22     	; 0xa6e <timer0_prescalar+0x68>
		{
			TCCR0 |= (1 << CS00);  // Set bit CS00 to 1
 a58:	83 b7       	in	r24, 0x33	; 51
 a5a:	81 60       	ori	r24, 0x01	; 1
 a5c:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1 << CS01); // Clear bit CS01 to 1
 a5e:	83 b7       	in	r24, 0x33	; 51
 a60:	82 60       	ori	r24, 0x02	; 2
 a62:	83 bf       	out	0x33, r24	; 51
			TCCR0 &= ~(1 << CS02); // Clear bit CS02 to 0
 a64:	83 b7       	in	r24, 0x33	; 51
 a66:	8b 7f       	andi	r24, 0xFB	; 251
 a68:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 a6a:	80 e0       	ldi	r24, 0x00	; 0
 a6c:	08 95       	ret
		  

		}
		else if(prescalar ==4) //Prescalar of 256
 a6e:	84 30       	cpi	r24, 0x04	; 4
 a70:	59 f4       	brne	.+22     	; 0xa88 <timer0_prescalar+0x82>
		{
			TCCR0 &= ~(1 << CS00);  // Set bit CS00 to 0
 a72:	83 b7       	in	r24, 0x33	; 51
 a74:	8e 7f       	andi	r24, 0xFE	; 254
 a76:	83 bf       	out	0x33, r24	; 51
			TCCR0 &= ~(1 << CS01); // Clear bit CS01 to 0
 a78:	83 b7       	in	r24, 0x33	; 51
 a7a:	8d 7f       	andi	r24, 0xFD	; 253
 a7c:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1 << CS02); // Clear bit CS02 to 1
 a7e:	83 b7       	in	r24, 0x33	; 51
 a80:	84 60       	ori	r24, 0x04	; 4
 a82:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 a84:	80 e0       	ldi	r24, 0x00	; 0
 a86:	08 95       	ret
		  
		}
		else if(prescalar ==5) //Prescalar of 1024
 a88:	85 30       	cpi	r24, 0x05	; 5
 a8a:	59 f4       	brne	.+22     	; 0xaa2 <timer0_prescalar+0x9c>
		{
			TCCR0 |= (1 << CS00);  // Set bit CS00 to 1
 a8c:	83 b7       	in	r24, 0x33	; 51
 a8e:	81 60       	ori	r24, 0x01	; 1
 a90:	83 bf       	out	0x33, r24	; 51
			TCCR0 &= ~(1 << CS01); // Clear bit CS01 to 0
 a92:	83 b7       	in	r24, 0x33	; 51
 a94:	8d 7f       	andi	r24, 0xFD	; 253
 a96:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1 << CS02); // Clear bit CS02 to 1
 a98:	83 b7       	in	r24, 0x33	; 51
 a9a:	84 60       	ori	r24, 0x04	; 4
 a9c:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 a9e:	80 e0       	ldi	r24, 0x00	; 0
 aa0:	08 95       	ret
		  
		}
		else if(prescalar ==6) //External clock source on T0 pin. Clock on falling edge
 aa2:	86 30       	cpi	r24, 0x06	; 6
 aa4:	59 f4       	brne	.+22     	; 0xabc <timer0_prescalar+0xb6>
		{
			TCCR0 &= ~(1 << CS00);  // Set bit CS00 to 0
 aa6:	83 b7       	in	r24, 0x33	; 51
 aa8:	8e 7f       	andi	r24, 0xFE	; 254
 aaa:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1 << CS01); // Clear bit CS01 to 1
 aac:	83 b7       	in	r24, 0x33	; 51
 aae:	82 60       	ori	r24, 0x02	; 2
 ab0:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1 << CS02); // Clear bit CS02 to 1
 ab2:	83 b7       	in	r24, 0x33	; 51
 ab4:	84 60       	ori	r24, 0x04	; 4
 ab6:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 ab8:	80 e0       	ldi	r24, 0x00	; 0
 aba:	08 95       	ret
		  
		}
		else if(prescalar ==7) //External clock source on T0 pin. Clock on rising edge.
 abc:	87 30       	cpi	r24, 0x07	; 7
 abe:	59 f4       	brne	.+22     	; 0xad6 <timer0_prescalar+0xd0>
		{
			TCCR0 |= (1 << CS00);  // Set bit CS00 to 0
 ac0:	83 b7       	in	r24, 0x33	; 51
 ac2:	81 60       	ori	r24, 0x01	; 1
 ac4:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1 << CS01); // Clear bit CS01 to 0
 ac6:	83 b7       	in	r24, 0x33	; 51
 ac8:	82 60       	ori	r24, 0x02	; 2
 aca:	83 bf       	out	0x33, r24	; 51
			TCCR0 |= (1 << CS02); // Clear bit CS02 to 0
 acc:	83 b7       	in	r24, 0x33	; 51
 ace:	84 60       	ori	r24, 0x04	; 4
 ad0:	83 bf       	out	0x33, r24	; 51
		  return TIMER_OK;
 ad2:	80 e0       	ldi	r24, 0x00	; 0
 ad4:	08 95       	ret
		}	
			
		else
		{
			//do nothing
			return TIMER_INVALID_PRESCALAR;
 ad6:	82 e0       	ldi	r24, 0x02	; 2
		}
	
	
}
 ad8:	08 95       	ret

00000ada <timer_stop>:
	
	return TIMER_OK;
}
void timer_stop(void)
{
	TCCR0= 0x00;
 ada:	13 be       	out	0x33, r1	; 51
 adc:	08 95       	ret

00000ade <timer_clrOF_Flag>:
	
	
}
void timer_clrOF_Flag(void)
{
		TIFR |= (1<<0);
 ade:	88 b7       	in	r24, 0x38	; 56
 ae0:	81 60       	ori	r24, 0x01	; 1
 ae2:	88 bf       	out	0x38, r24	; 56
 ae4:	08 95       	ret

00000ae6 <timer_delay>:
	
}


EN_TimerError_t timer_delay(uint16_t timeDelay)
{
 ae6:	ff 92       	push	r15
 ae8:	0f 93       	push	r16
 aea:	1f 93       	push	r17
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
	uint16_t overFlowCounter = 0;
	uint16_t numberOfOverflows = 4*timeDelay;
 af0:	8c 01       	movw	r16, r24
 af2:	00 0f       	add	r16, r16
 af4:	11 1f       	adc	r17, r17
 af6:	00 0f       	add	r16, r16
 af8:	11 1f       	adc	r17, r17
	//Delay 
	//Timer start -> setting the clock source
	
	if(timer0_prescalar(TIMER0_NO_PRESCALLING) != TIMER_OK)
 afa:	81 e0       	ldi	r24, 0x01	; 1
 afc:	0e 94 03 05 	call	0xa06	; 0xa06 <timer0_prescalar>
 b00:	f8 2e       	mov	r15, r24
 b02:	81 11       	cpse	r24, r1
 b04:	0f c0       	rjmp	.+30     	; 0xb24 <timer_delay+0x3e>
 b06:	c0 e0       	ldi	r28, 0x00	; 0
 b08:	d0 e0       	ldi	r29, 0x00	; 0
 b0a:	06 c0       	rjmp	.+12     	; 0xb18 <timer_delay+0x32>
		return TIMER_INVALID_DELAY;
		} // No Prescalar
	while(overFlowCounter < numberOfOverflows)
	{
		// wait until the overflow flag to be set 1
		while((TIFR & (1<<0)) == 0); //busy wait
 b0c:	08 b6       	in	r0, 0x38	; 56
 b0e:	00 fe       	sbrs	r0, 0
 b10:	fd cf       	rjmp	.-6      	; 0xb0c <timer_delay+0x26>
		
		// clear the overflow flag
		timer_clrOF_Flag();
 b12:	0e 94 6f 05 	call	0xade	; 0xade <timer_clrOF_Flag>
		overFlowCounter++;
 b16:	21 96       	adiw	r28, 0x01	; 1
	
	if(timer0_prescalar(TIMER0_NO_PRESCALLING) != TIMER_OK)
	{
		return TIMER_INVALID_DELAY;
		} // No Prescalar
	while(overFlowCounter < numberOfOverflows)
 b18:	c0 17       	cp	r28, r16
 b1a:	d1 07       	cpc	r29, r17
 b1c:	b8 f3       	brcs	.-18     	; 0xb0c <timer_delay+0x26>
		overFlowCounter++;
	}
	overFlowCounter= 0;
	
	//Timer stop
	timer_stop();
 b1e:	0e 94 6d 05 	call	0xada	; 0xada <timer_stop>
	
	return TIMER_OK;
 b22:	04 c0       	rjmp	.+8      	; 0xb2c <timer_delay+0x46>
	//Delay 
	//Timer start -> setting the clock source
	
	if(timer0_prescalar(TIMER0_NO_PRESCALLING) != TIMER_OK)
	{
		return TIMER_INVALID_DELAY;
 b24:	0f 2e       	mov	r0, r31
 b26:	f3 e0       	ldi	r31, 0x03	; 3
 b28:	ff 2e       	mov	r15, r31
 b2a:	f0 2d       	mov	r31, r0
	
	//Timer stop
	timer_stop();
	
	return TIMER_OK;
}
 b2c:	8f 2d       	mov	r24, r15
 b2e:	df 91       	pop	r29
 b30:	cf 91       	pop	r28
 b32:	1f 91       	pop	r17
 b34:	0f 91       	pop	r16
 b36:	ff 90       	pop	r15
 b38:	08 95       	ret

00000b3a <__tablejump2__>:
 b3a:	ee 0f       	add	r30, r30
 b3c:	ff 1f       	adc	r31, r31
 b3e:	05 90       	lpm	r0, Z+
 b40:	f4 91       	lpm	r31, Z
 b42:	e0 2d       	mov	r30, r0
 b44:	09 94       	ijmp

00000b46 <_exit>:
 b46:	f8 94       	cli

00000b48 <__stop_program>:
 b48:	ff cf       	rjmp	.-2      	; 0xb48 <__stop_program>
